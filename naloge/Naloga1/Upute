1. Domača naloga
Vector4f (1 točka)
V JavaScriptu implementirajte razred Vector4f, ki naj hrani koordinate 3D prostorskega vektorja in vsebuje metode (v <> oklepajih so definirani pričakovani tipi):

<Vector4f> out negate(<Vector4f> input), metoda naj vrne nov vektor, ki predstavlja negiran vhoden vektor,
<Vector4f> out add(<Vector4f> input1, <Vector4f> input2), metoda naj vrne nov vektor, ki predstavlja vsoto vhodnih vektorjev,
<Vector4f> out scalarProduct(<float> input1, <Vector4f> input2), metoda naj vrne nov vektor, ki je vhodni vektor pomnožen s skalarjem,
<float> out dotProduct(<Vector4f> input1, <Vector4f> input2) (skalarni produkt), metoda naj vrne float vrednost skalarnega produkta vhodnih vektorjev,
<Vector4f> out crossProduct(<Vector4f> input1, <Vector4f> input2) (vektorski produkt), metoda naj vrne nov vektor, ki je rezultat vektorskega produkta vhodnih vektorjev,
<float> out length(<Vector4f> input), metoda naj vrne float vrednost dolžine vhodnega vektorja,
<Vector4f> out normalize(<Vector4f> input), metoda naj vrne nov vektor, ki predstavlja normiran vhodni vektor,
<Vector4f> out project(<Vector4f> input1, <Vector4f> input2), metoda naj vrne nov vektor, ki je rezultat projekcije enega vektorja na drugega,
<float> out cosPhi(<Vector4f> input1, <Vector4f> input2), metoda naj vrne float vrednost kosinusa kota med vektorjema.
Četrta komponenta vektroja predstavlja homogeno komponento.

Razred naj opozarja na morebitne nekonsistence pri operacijah.

Matrix4f (1 točka)
V JavaScriptu implementirajte razred Matrix4f, ki naj hrani vrednosti 4x4 matrike v lastni spremenljivki spremenljivki. 
Razred naj omogoča hranjenje matrik s float vrednostmi in vsebuje naslednje statične metode za:

<Matrix4f> out negate(<Matrix4f> input), metoda naj vrne novo matriko, ki predstavlja negirano vhodno matriko,
<Matrix4f> out add(<Matrix4f> input1, <Matrix4f> input2), metoda naj vrne novo matriko, ki predstavlja vsoto vhodnih matirk,
<Matrix4f> out transpose(<Matrix4f> input), metoda naj vrne novo matriko, ki predstavlja transponirano vhodno matriko,
<Matrix4f> out multiplyScalar(<float> input1, <Matrix4f> input2), metoda naj vrne novo matriko, ki predstavlja s skalarjem pomnoženo matriko,
<Matrix4f> out multiply(<Matrix4f> input1, <Matrix4f> input2), metoda naj vrne novo matriko, ki je rezultat množenja dveh matrik.
Razred naj opozarja na morebitne nekonsistence pri operacijah.

PointManager (1 točka)
V JavaScriptu implementirajte razred PointManager, ki omogoča branje točk iz vnosnega polja HTML dokumenta (textarea) v 
seznam primerkov razreda Vector4f. Razred omogoča tudi zapis seznama točk v vnosno polje HTML dokumenta (textarea) 
v enaki obliki, kot jih prebere iz vhodne datoteke. Točke v vhodemi in izhodnem polju so definirane kot je prikazano spodaj:

v x1 y1 z1
v x2 y2 z2
v x3 y3 z3

Transformation (2 točki)
1. V JavaScriptu implementirajte razred Transformation, ki naj hrani transformacijsko matriko
 v privatni spremenljivki tipa Matrix4f in naj ima naslednje metode:

translate(<Vector4f> input), ki naj prejme kot parameter primerek razreda Vector4f in ustrezno spremeni shranjeno matirko,
scale(<Vector4f> input), ki naj prejme kot parameter primerek razreda Vector4f in ustrezno spremeni shranjeno matriko,
rotateX(<float> input), ki sprejme en parameter s katerim spremenimo transformacijsko matriko za vrtenje okoli osi x,
rotateY(<float> input), ki sprejme en parameter s katerim spremenimo transformacijsko matriko za vrtenje okoli osi y,
rotateZ(<float> input), ki sprejme en parameter s katerim spremenimo transformacijsko matriko za vrtenje okoli osi z,
transformPoint(<Vector4f> input), ki naj prejme točko v obliki Vector4f in vrne transformirano točko v enaki obliki.
2. V JavaScriptu implementirajte razred TransformPoints, ki demonstrira uporabo vseh zgornjih razredov. 
Razred naj prebere točke iz vhodnega vnosnega polja, jih transformira v skladu s spodnjimi
 navodili in transformirane točke zapiše v predvideno izhodno vnosno polje HTML dokumenta.

Navodila za transformiranje točk:

translacja vzdolž osi x za 1.25
rotacija okoli osi z za kot pi/3
translacija vzdolž osi z za 4.15
translacija vzdolž osi y za 3.14
skalacija vzdolž osi x in y za 1.12
rotacija okoli osi y za kot 5*pi/8
Povzetek
V okviru naloge implementirajte razrede Vector4f, Matrix4f, PointManager, Transformation in TransformPoints z zahtevanimi funkcionalnostmi.

Vso funkcionalnost v programu razvijte s pomočjo osnovnih funkcionalnosti JavaScripta in ne uporabljajte dodatnih knjižnic.

Nalogo oddajte v obliki ZIP arhiva. V arhivu naj bodo datoteke html in js in navodila za uporabo (txt).